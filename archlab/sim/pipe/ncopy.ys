#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	iaddq $-8, %rdx		# loop unrolling based on 8
	jl handle_remainder

# loop unrolling based on 8
loop_unrolling:
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rcx

judge_and_write_num0:
	andq %r8, %r8
	rmmovq %r8, (%rsi)
	jle judge_and_write_num1
	iaddq $1, %rax

judge_and_write_num1:
	andq %r9, %r9
	rmmovq %r9, 8(%rsi)
	jle judge_and_write_num2
	iaddq $1, %rax

judge_and_write_num2:
	andq %r10, %r10
	rmmovq %r10, 16(%rsi)
	jle judge_and_write_num3
	iaddq $1, %rax

judge_and_write_num3:
	andq %r11, %r11
	rmmovq %r11, 24(%rsi)
	jle judge_and_write_num4
	iaddq $1, %rax

judge_and_write_num4:
	andq %r12, %r12
	rmmovq %r12, 32(%rsi)
	jle judge_and_write_num5
	iaddq $1, %rax

judge_and_write_num5:
	andq %r13, %r13
	rmmovq %r13, 40(%rsi)
	jle judge_and_write_num6
	iaddq $1, %rax

judge_and_write_num6:
	andq %r14, %r14
	rmmovq %r14, 48(%rsi)
	jle judge_and_write_num7
	iaddq $1, %rax

judge_and_write_num7:
	andq %rcx, %rcx
	rmmovq %rcx, 56(%rsi)
	jle update_con
	iaddq $1, %rax

update_con:
	iaddq $64, %rdi
	iaddq $64, %rsi
	iaddq $-8, %rdx
	jge loop_unrolling

# -8 - -1
handle_remainder:
	# -8 ~ -1 to -4 ~ 3
	iaddq $4, %rdx
	# -4 ~ -1
	jl handle_remainder_0_to_3

handle_remainder_4_to_7:
	# 0 ~ 3 to -2 ~ 1
	iaddq $-2, %rdx
	# -2 ~ -1
	jl handle_remainder_4_to_5

handle_remainder_6_to_7:
	# 0 ~ 1 
	mrmovq 40(%rdi), %rbx
	je handle_remainder_6
	mrmovq 48(%rdi), %rbx
	jmp handle_remainder_7

handle_remainder_4_to_5:
	# -2 ~ -1 to -1 ~ 0
	iaddq $1, %rdx
	mrmovq 32(%rdi), %rbx
	je handle_remainder_5
	mrmovq 24(%rdi), %rbx
	jmp handle_remainder_4

handle_remainder_0_to_3:
	# -4 ~ -1 to -2 ~ 1
	iaddq $2, %rdx
	# -2 ~ -1
	jl handle_remainder_0_to_1

handle_remainder_2_to_3:
	# 0 ~ 1
	mrmovq 8(%rdi), %rbx
	je handle_remainder_2
	mrmovq 16(%rdi), %rbx
	jmp handle_remainder_3

handle_remainder_0_to_1:
	# -2 ~ -1 to -1 ~ 0
	iaddq $1, %rdx
	mrmovq (%rdi), %rbx
	je handle_remainder_1
	ret

handle_remainder_7:
	andq %rbx, %rbx
	rmmovq %rbx, 48(%rsi)
	mrmovq 40(%rdi), %rbx
	jle handle_remainder_6
	iaddq $1, %rax

handle_remainder_6:
	andq %rbx, %rbx
	rmmovq %rbx, 40(%rsi)
	mrmovq 32(%rdi), %rbx
	jle handle_remainder_5
	iaddq $1, %rax

handle_remainder_5:
	andq %rbx, %rbx
	rmmovq %rbx, 32(%rsi)
	mrmovq 24(%rdi), %rbx
	jle handle_remainder_4
	iaddq $1, %rax

handle_remainder_4:
	andq %rbx, %rbx
	rmmovq %rbx, 24(%rsi)
	mrmovq 16(%rdi), %rbx
	jle handle_remainder_3
	iaddq $1, %rax

handle_remainder_3:
	andq %rbx, %rbx
	rmmovq %rbx, 16(%rsi)
	mrmovq 8(%rdi), %rbx
	jle handle_remainder_2
	iaddq $1, %rax

handle_remainder_2:
	andq %rbx, %rbx
	rmmovq %rbx, 8(%rsi)
	mrmovq (%rdi), %rbx
	jle handle_remainder_1
	iaddq $1, %rax

handle_remainder_1:
	andq %rbx, %rbx
	rmmovq %rbx, (%rsi)
	jle Done
	iaddq $1, %rax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */

